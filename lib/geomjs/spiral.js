// Generated by CoffeeScript 1.4.0
(function() {
  var Cloneable, Ellipsis, Equatable, Formattable, Geometry, Intersections, Memoizable, Parameterizable, Path, Point, Sourcable, Spiral, include;

  include = require('./include').include;

  Point = require('./point');

  Ellipsis = require('./ellipsis');

  Equatable = require('./mixins/equatable');

  Formattable = require('./mixins/formattable');

  Geometry = require('./mixins/geometry');

  Cloneable = require('./mixins/cloneable');

  Memoizable = require('./mixins/memoizable');

  Sourcable = require('./mixins/sourcable');

  Path = require('./mixins/path');

  Intersections = require('./mixins/intersections');

  Parameterizable = require('./mixins/parameterizable');

  Spiral = (function() {
    var PROPERTIES, memoizationKey;

    PROPERTIES = ['radius1', 'radius2', 'twirl', 'x', 'y', 'rotation', 'segments'];

    include([
      Equatable.apply(null, PROPERTIES), Formattable.apply(null, ['Spiral'].concat(PROPERTIES)), Parameterizable('spiralFrom', {
        radius1: 1,
        radius2: 1,
        twirl: 1,
        x: 0,
        y: 0,
        rotation: 0,
        segments: 36
      }), Sourcable.apply(null, ['geomjs.Spiral'].concat(PROPERTIES)), Cloneable, Memoizable, Geometry, Path, Intersections
    ])["in"](Spiral);

    function Spiral(r1, r2, twirl, x, y, rot, segments) {
      var _ref;
      _ref = this.spiralFrom(r1, r2, twirl, x, y, rot, segments), this.radius1 = _ref.radius1, this.radius2 = _ref.radius2, this.twirl = _ref.twirl, this.x = _ref.x, this.y = _ref.y, this.rotation = _ref.rotation, this.segments = _ref.segments;
    }

    Spiral.prototype.center = function() {
      return new Point(this.x, this.y);
    };

    Spiral.prototype.ellipsis = function() {
      if (this.memoized('ellipsis')) {
        return this.memoFor('ellipsis');
      }
      return this.memoize('ellipsis', new Ellipsis(this));
    };

    Spiral.prototype.translate = function(x, y) {
      var _ref;
      _ref = Point.pointFrom(x, y), x = _ref.x, y = _ref.y;
      this.x += x;
      this.y += y;
      return this;
    };

    Spiral.prototype.rotate = function(rotation) {
      this.rotation += rotation;
      return this;
    };

    Spiral.prototype.scale = function(scale) {
      this.radius1 *= scale;
      this.radius2 *= scale;
      return this;
    };

    Spiral.prototype.points = function() {
      var center, ellipsis, i, p, points, _i, _ref;
      if (this.memoized('points')) {
        return this.memoFor('points').concat();
      }
      points = [];
      center = this.center();
      ellipsis = this.ellipsis();
      for (i = _i = 0, _ref = this.segments; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        p = i / this.segments;
        points.push(this.pathPointAt(p));
      }
      return this.memoize('points', points);
    };

    Spiral.prototype.pathPointAt = function(pos, posBasedOnLength) {
      var angle, center, ellipsis, pt, _ref;
      if (posBasedOnLength == null) {
        posBasedOnLength = true;
      }
      center = this.center();
      ellipsis = this.ellipsis();
      angle = this.rotation + pos * 360 * this.twirl % 360;
      pt = (_ref = ellipsis.pointAtAngle(angle)) != null ? _ref.subtract(center).scale(pos) : void 0;
      return center.add(pt);
    };

    Spiral.prototype.fill = function() {};

    Spiral.prototype.drawPath = function(context) {
      var p, points, start, _i, _len, _results;
      points = this.points();
      start = points.shift();
      context.beginPath();
      context.moveTo(start.x, start.y);
      _results = [];
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        p = points[_i];
        _results.push(context.lineTo(p.x, p.y));
      }
      return _results;
    };

    memoizationKey = function() {
      return "" + this.radius1 + ";" + this.radius2 + ";" + this.twirl + ";" + this.x + ";" + this.y + ";" + this.rotation + ";" + this.segments;
    };

    return Spiral;

  })();

  module.exports = Spiral;

}).call(this);
