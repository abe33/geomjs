// Generated by CoffeeScript 1.4.0
(function() {
  var Cloneable, Diamond, Equatable, Formattable, Geometry, Intersections, Memoizable, Parameterizable, Path, Point, Sourcable, Surface, Triangle, include;

  include = require('./include').include;

  Point = require('./point');

  Triangle = require('./triangle');

  Equatable = require('./mixins/equatable');

  Formattable = require('./mixins/formattable');

  Cloneable = require('./mixins/cloneable');

  Sourcable = require('./mixins/sourcable');

  Memoizable = require('./mixins/memoizable');

  Parameterizable = require('./mixins/parameterizable');

  Geometry = require('./mixins/geometry');

  Surface = require('./mixins/surface');

  Path = require('./mixins/path');

  Intersections = require('./mixins/intersections');

  Diamond = (function() {
    var PROPERTIES;

    PROPERTIES = ['topLength', 'rightLength', 'bottomLength', 'leftLength', 'x', 'y', 'rotation'];

    include([
      Formattable.apply(Formattable, ['Diamond'].concat(PROPERTIES)), Parameterizable('diamondFrom', {
        topLength: 1,
        rightLength: 1,
        bottomLength: 1,
        leftLength: 1,
        x: 0,
        y: 0,
        rotation: 0
      }), Sourcable(['geomjs.Diamond'].concat(PROPERTIES)), Equatable.apply(Equatable, PROPERTIES), Cloneable, Geometry, Memoizable, Surface, Path, Intersections
    ])["in"](Diamond);

    function Diamond(topLength, rightLength, bottomLength, leftLength, x, y, rotation) {
      var args;
      args = this.diamondFrom(topLength, rightLength, bottomLength, leftLength, x, y, rotation);
      this.topLength = args.topLength, this.rightLength = args.rightLength, this.bottomLength = args.bottomLength, this.leftLength = args.leftLength, this.x = args.x, this.y = args.y, this.rotation = args.rotation;
    }

    Diamond.prototype.center = function() {
      return new Point(this.x, this.y);
    };

    Diamond.prototype.topAxis = function() {
      return new Point(0, -this.topLength).rotate(this.rotation);
    };

    Diamond.prototype.bottomAxis = function() {
      return new Point(0, this.bottomLength).rotate(this.rotation);
    };

    Diamond.prototype.leftAxis = function() {
      return new Point(-this.leftLength, 0).rotate(this.rotation);
    };

    Diamond.prototype.rightAxis = function() {
      return new Point(this.rightLength, 0).rotate(this.rotation);
    };

    Diamond.prototype.corners = function() {
      return [this.topCorner(), this.rightCorner(), this.bottomCorner(), this.leftCorner()];
    };

    Diamond.prototype.topCorner = function() {
      return this.center().add(this.topAxis());
    };

    Diamond.prototype.bottomCorner = function() {
      return this.center().add(this.bottomAxis());
    };

    Diamond.prototype.leftCorner = function() {
      return this.center().add(this.leftAxis());
    };

    Diamond.prototype.rightCorner = function() {
      return this.center().add(this.rightAxis());
    };

    Diamond.prototype.edges = function() {
      return [this.topLeftEdge(), this.topRightEdge(), this.bottomRightEdge(), this.bottomLeftEdge()];
    };

    Diamond.prototype.topLeftEdge = function() {
      return this.topCorner().subtract(this.leftCorner());
    };

    Diamond.prototype.topRightEdge = function() {
      return this.rightCorner().subtract(this.topCorner());
    };

    Diamond.prototype.bottomLeftEdge = function() {
      return this.leftCorner().subtract(this.bottomCorner());
    };

    Diamond.prototype.bottomRightEdge = function() {
      return this.bottomCorner().subtract(this.rightCorner());
    };

    Diamond.prototype.quadrants = function() {
      return [this.topLeftQuadrant(), this.topRightQuadrant(), this.bottomRightQuadrant(), this.bottomLeftQuadrant()];
    };

    Diamond.prototype.topLeftQuadrant = function() {
      var k;
      k = 'topLeftQuadrant';
      if (this.memoized(k)) {
        return this.memoFor(k);
      }
      return this.memoize(k, new Triangle(this.center(), this.topCorner(), this.leftCorner()));
    };

    Diamond.prototype.topRightQuadrant = function() {
      var k;
      k = 'topRightQuadrant';
      if (this.memoized(k)) {
        return this.memoFor(k);
      }
      return this.memoize(k, new Triangle(this.center(), this.topCorner(), this.rightCorner()));
    };

    Diamond.prototype.bottomLeftQuadrant = function() {
      var k;
      k = 'bottomLeftQuadrant';
      if (this.memoized(k)) {
        return this.memoFor(k);
      }
      return this.memoize(k, new Triangle(this.center(), this.bottomCorner(), this.leftCorner()));
    };

    Diamond.prototype.bottomRightQuadrant = function() {
      var k;
      k = 'bottomRightQuadrant';
      if (this.memoized(k)) {
        return this.memoFor(k);
      }
      return this.memoize(k, new Triangle(this.center(), this.bottomCorner(), this.rightCorner()));
    };

    Diamond.prototype.top = function() {
      return Math.min(this.topCorner().y, this.bottomCorner().y, this.leftCorner().y, this.rightCorner().y);
    };

    Diamond.prototype.bottom = function() {
      return Math.max(this.topCorner().y, this.bottomCorner().y, this.leftCorner().y, this.rightCorner().y);
    };

    Diamond.prototype.left = function() {
      return Math.min(this.topCorner().x, this.bottomCorner().x, this.leftCorner().x, this.rightCorner().x);
    };

    Diamond.prototype.right = function() {
      return Math.max(this.topCorner().x, this.bottomCorner().x, this.leftCorner().x, this.rightCorner().x);
    };

    Diamond.prototype.points = function() {
      var t;
      return [t = this.topCorner(), this.rightCorner(), this.bottomCorner(), this.leftCorner(), t];
    };

    Diamond.prototype.triangles = function() {
      return this.quadrants();
    };

    Diamond.prototype.closedGeometry = function() {
      return true;
    };

    Diamond.prototype.pointAtAngle = function(angle) {
      var center, vec, _ref;
      center = this.center();
      vec = center.add(Math.cos(Math.degToRad(angle)) * 10000, Math.sin(Math.degToRad(angle)) * 10000);
      return (_ref = this.intersections({
        points: function() {
          return [center, vec];
        }
      })) != null ? _ref[0] : void 0;
    };

    Diamond.prototype.acreage = function() {
      return this.topLeftQuadrant().acreage() + this.topRightQuadrant().acreage() + this.bottomLeftQuadrant().acreage() + this.bottomRightQuadrant().acreage();
    };

    Diamond.prototype.contains = function(x, y) {
      return this.center().equals(x, y) || this.topLeftQuadrant().contains(x, y) || this.topRightQuadrant().contains(x, y) || this.bottomLeftQuadrant().contains(x, y) || this.bottomRightQuadrant().contains(x, y);
    };

    Diamond.prototype.randomPointInSurface = function(random) {
      var a, a1, a2, a3, a4, l, l1, l2, l3, l4, n, q1, q2, q3, q4;
      l = this.acreage();
      q1 = this.topLeftQuadrant();
      q2 = this.topRightQuadrant();
      q3 = this.bottomRightQuadrant();
      q4 = this.bottomLeftQuadrant();
      a1 = q1.acreage();
      a2 = q2.acreage();
      a3 = q3.acreage();
      a4 = q4.acreage();
      a = a1 + a2 + a3 + a4;
      l1 = a1 / a;
      l2 = a2 / a;
      l3 = a3 / a;
      l4 = a4 / a;
      n = random.get();
      if (n < l1) {
        return q1.randomPointInSurface(random);
      } else if (n < l1 + l2) {
        return q2.randomPointInSurface(random);
      } else if (n < l1 + l2 + l3) {
        return q3.randomPointInSurface(random);
      } else {
        return q4.randomPointInSurface(random);
      }
    };

    Diamond.prototype.length = function() {
      return this.topRightEdge().length() + this.topLeftEdge().length() + this.bottomRightEdge().length() + this.bottomLeftEdge().length();
    };

    Diamond.prototype.pathPointAt = function(n, pathBasedOnLength) {
      var p1, p2, p3, _ref;
      if (pathBasedOnLength == null) {
        pathBasedOnLength = true;
      }
      _ref = this.pathSteps(pathBasedOnLength), p1 = _ref[0], p2 = _ref[1], p3 = _ref[2];
      if (n < p1) {
        return this.topCorner().add(this.topRightEdge().scale(Math.map(n, 0, p1, 0, 1)));
      } else if (n < p2) {
        return this.rightCorner().add(this.bottomRightEdge().scale(Math.map(n, p1, p2, 0, 1)));
      } else if (n < p3) {
        return this.bottomCorner().add(this.bottomLeftEdge().scale(Math.map(n, p2, p3, 0, 1)));
      } else {
        return this.leftCorner().add(this.topLeftEdge().scale(Math.map(n, p3, 1, 0, 1)));
      }
    };

    Diamond.prototype.pathOrientationAt = function(n, pathBasedOnLength) {
      var p, p1, p2, p3, _ref;
      if (pathBasedOnLength == null) {
        pathBasedOnLength = true;
      }
      _ref = this.pathSteps(pathBasedOnLength), p1 = _ref[0], p2 = _ref[1], p3 = _ref[2];
      if (n < p1) {
        p = this.topRightEdge();
      } else if (n < p2) {
        p = this.bottomRightEdge();
      } else if (n < p3) {
        p = this.bottomLeftEdge().scale(-1);
      } else {
        p = this.topLeftEdge().scale(-1);
      }
      return p.angle();
    };

    Diamond.prototype.pathSteps = function(pathBasedOnLength) {
      var l, p1, p2, p3;
      if (pathBasedOnLength == null) {
        pathBasedOnLength = true;
      }
      if (pathBasedOnLength) {
        l = this.length();
        p1 = this.topRightEdge().length() / l;
        p2 = p1 + this.bottomRightEdge().length() / l;
        p3 = p2 + this.bottomLeftEdge().length() / l;
      } else {
        p1 = 1 / 4;
        p2 = 1 / 2;
        p3 = 3 / 4;
      }
      return [p1, p2, p3];
    };

    Diamond.prototype.memoizationKey = function() {
      return "" + this.x + ";" + this.y + ";" + this.topLength + ";" + this.bottomLength + ";" + this.leftLength + ";" + this.rightLength;
    };

    return Diamond;

  })();

  module.exports = Diamond;

}).call(this);
