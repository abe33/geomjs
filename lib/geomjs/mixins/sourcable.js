// Generated by CoffeeScript 1.4.0
(function() {
  var Mixin, Sourcable,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Mixin = require('./mixin');

  Sourcable = function() {
    var ConcretSourcable, name, signature;
    name = arguments[0], signature = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return ConcretSourcable = (function(_super) {

      __extends(ConcretSourcable, _super);

      function ConcretSourcable() {
        return ConcretSourcable.__super__.constructor.apply(this, arguments);
      }

      ConcretSourcable.prototype.toSource = function() {
        var arg, args;
        args = ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = signature.length; _i < _len; _i++) {
            arg = signature[_i];
            _results.push(this[arg]);
          }
          return _results;
        }).call(this)).map(function(o) {
          var isArray;
          switch (typeof o) {
            case 'object':
              isArray = Object.prototype.toString.call(o).indexOf('Array') !== -1;
              if (o.toSource != null) {
                return o.toSource();
              } else {
                if (isArray) {
                  return "[" + (o.map(function(el) {
                    if (el.toSource != null) {
                      return el.toSource();
                    } else {
                      return el;
                    }
                  })) + "]";
                } else {
                  return o;
                }
              }
              break;
            case 'string':
              if (o.toSource != null) {
                return o.toSource();
              } else {
                return "'" + (o.replace("'", "\\'")) + "'";
              }
              break;
            default:
              return o;
          }
        });
        return "new " + name + "(" + (args.join(',')) + ")";
      };

      return ConcretSourcable;

    })(Mixin);
  };

  module.exports = Sourcable;

}).call(this);
