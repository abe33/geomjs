// Generated by CoffeeScript 1.4.0
(function() {
  var Cloneable, Equatable, Formattable, Geometry, Intersections, Path, Point, Polygon, Sourcable, Surface, Triangulable;

  Point = require('./point');

  Equatable = require('./mixins/equatable');

  Cloneable = require('./mixins/cloneable');

  Sourcable = require('./mixins/sourcable');

  Formattable = require('./mixins/formattable');

  Triangulable = require('./mixins/triangulable');

  Geometry = require('./mixins/geometry');

  Surface = require('./mixins/surface');

  Path = require('./mixins/path');

  Intersections = require('./mixins/intersections');

  Polygon = (function() {

    Formattable('Polygon', 'vertices').attachTo(Polygon);

    Sourcable('geomjs.Polygon', 'vertices').attachTo(Polygon);

    Cloneable.attachTo(Polygon);

    Geometry.attachTo(Polygon);

    Intersections.attachTo(Polygon);

    Triangulable.attachTo(Polygon);

    Polygon.polygonFrom = function(vertices) {
      var isArray;
      if ((vertices != null) && typeof vertices === 'object') {
        isArray = Object.prototype.toString.call(vertices).indexOf('Array') !== -1;
        if (!isArray) {
          return vertices;
        }
        return {
          vertices: vertices
        };
      } else {
        return {
          vertices: null
        };
      }
    };

    function Polygon(vertices) {
      vertices = this.polygonFrom(vertices).vertices;
      if (vertices == null) {
        this.noVertices();
      }
      if (vertices.length < 3) {
        this.notEnougthVertices(vertices);
      }
      this.vertices = vertices;
    }

    Polygon.prototype.points = function() {
      return this.vertices.concat(this.vertices[0]);
    };

    Polygon.prototype.polygonFrom = Polygon.polygonFrom;

    Polygon.prototype.memoizationKey = function() {
      return this.vertices.map(function(pt) {
        return "" + pt.x + "," + pt.y;
      }).join(";");
    };

    Polygon.prototype.noVertices = function() {
      throw new Error('No vertices provided to Polygon');
    };

    Polygon.prototype.notEnougthVertices = function(vertices) {
      var length;
      length = vertices.length;
      throw new Error("Polygon must have at least 3 vertices, was " + length);
    };

    return Polygon;

  })();

  module.exports = Polygon;

}).call(this);
