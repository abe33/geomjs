// Generated by CoffeeScript 1.4.0
(function() {
  var Tester;

  Tester = (function() {
    var colorPalette;

    colorPalette = {
      shapeStroke: '#ff0000',
      shapeFill: 'rgba(255,0,0,0.2)',
      bounds: 'rgba(133, 153, 0, 0.3)',
      intersections: '#268bd2',
      intersections2: 'white',
      text: '#93a1a1',
      mobile: '#b58900'
    };

    function Tester(geometry) {
      this.geometry = geometry;
      this.pathPosition = 0;
      this.random = new chancejs.Random(new chancejs.MathRandom);
    }

    Tester.prototype.animate = function(t) {
      this.pathPosition += t;
      if (this.pathPosition > 10000) {
        return this.pathPosition -= 10000;
      }
    };

    Tester.prototype.renderShape = function(context) {
      this.geometry.fill(context, colorPalette.shapeFill);
      return this.geometry.stroke(context, colorPalette.shapeStroke);
    };

    Tester.prototype.renderPath = function(context) {
      var pt, tan, tr;
      pt = this.geometry.pathPointAt(this.pathPosition / 10000);
      tan = this.geometry.pathOrientationAt(this.pathPosition / 10000);
      tr = new geomjs.Rectangle(pt.x, pt.y, 6, 6, tan);
      return tr.stroke(context, colorPalette.mobile);
    };

    Tester.prototype.renderSurface = function(context) {
      var i, pt, _i, _results;
      context.fillStyle = colorPalette.shapeStroke;
      _results = [];
      for (i = _i = 0; _i <= 100; i = ++_i) {
        pt = this.geometry.randomPointInSurface(this.random);
        _results.push(context.fillRect(pt.x, pt.y, 1, 1));
      }
      return _results;
    };

    Tester.prototype.renderBounds = function(context) {
      var r;
      context.strokeStyle = colorPalette.bounds;
      r = this.geometry.boundingBox();
      return context.strokeRect(r.x, r.y, r.width, r.height);
    };

    Tester.prototype.renderClosedGeometry = function(context) {
      var c, pt1, pt2;
      c = this.geometry.center();
      pt1 = this.geometry.pointAtAngle(0);
      pt2 = this.geometry.pointAtAngle(-90);
      context.fillStyle = colorPalette.intersections;
      context.strokeStyle = colorPalette.intersections;
      context.fillRect(pt1.x - 2, pt1.y - 2, 4, 4);
      context.fillRect(pt2.x - 2, pt2.y - 2, 4, 4);
      context.beginPath();
      context.moveTo(pt1.x, pt1.y);
      context.lineTo(c.x, c.y);
      context.lineTo(pt2.x, pt2.y);
      return context.stroke();
    };

    Tester.prototype.render = function(context) {
      if ((this.geometry.stroke != null) && (this.geometry.fill != null)) {
        this.renderShape(context);
      }
      if (this.geometry.bounds != null) {
        this.renderBounds(context);
      }
      if ((this.geometry.pathPointAt != null) && (this.geometry.pathOrientationAt != null)) {
        this.renderPath(context);
      }
      if (this.geometry.randomPointInSurface != null) {
        this.renderSurface(context);
      }
      if ((this.geometry.center != null) && (this.geometry.pointAtAngle != null)) {
        return this.renderClosedGeometry(context);
      }
    };

    return Tester;

  })();

}).call(this);
