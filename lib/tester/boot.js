// Generated by CoffeeScript 1.4.0
(function() {

  $(document).ready(function() {
    var animate, animated, canvas, context, geometries, render, requestAnimationFrame, stats, t, testers;
    stats = new Stats;
    stats.setMode(0);
    $('div').prepend(stats.domElement);
    requestAnimationFrame = window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || window.requestAnimationFrame || function(f) {
      return setTimeout(f, 1000 / 60);
    };
    canvas = $('canvas');
    context = canvas[0].getContext('2d');
    animated = false;
    geometries = [new geomjs.Rectangle(250, 40, 180, 100, 16), new geomjs.Triangle(new geomjs.Point(100, 80), new geomjs.Point(320, 120), new geomjs.Point(140, 200)), new geomjs.Circle(60, 80, 160), new geomjs.Ellipsis(120, 60, 470, 180, 10)];
    testers = geometries.map(function(g) {
      return new Tester(g);
    });
    t = new Date().valueOf();
    render = function() {
      var a, g1, g2, intersection, intersections, tested, _i, _j, _k, _len, _len1, _len2, _results;
      context.fillStyle = '#042029';
      context.fillRect(0, 0, canvas.width(), canvas.height());
      testers.forEach(function(t) {
        return t.render(context);
      });
      intersections = [];
      tested = {};
      for (_i = 0, _len = geometries.length; _i < _len; _i++) {
        g1 = geometries[_i];
        for (_j = 0, _len1 = geometries.length; _j < _len1; _j++) {
          g2 = geometries[_j];
          if (g1 === g2) {
            continue;
          }
          if (tested[g2 + g1]) {
            continue;
          }
          console.log("test " + g1 + " vs " + g2);
          a = g1.intersections(g2);
          if (a != null) {
            intersections = intersections.concat(a);
          }
          tested[g1 + g2] = true;
        }
      }
      context.fillStyle = '#ffffff';
      _results = [];
      for (_k = 0, _len2 = intersections.length; _k < _len2; _k++) {
        intersection = intersections[_k];
        _results.push(context.fillRect(intersection.x - 2, intersection.y - 2, 4, 4));
      }
      return _results;
    };
    animate = function(n) {
      var d;
      stats.begin();
      d = n - t;
      t = n;
      testers.forEach(function(t) {
        return t.animate(d);
      });
      geometries[0].rotateAroundCenter(d / 70);
      geometries[0].inflateAroundCenter(Math.cos(t * Math.PI / 180), Math.sin(t * Math.PI / 180));
      geometries[1].rotateAroundCenter(-d / 60);
      geometries[1].scaleAroundCenter(1 + Math.cos(t / 12 * Math.PI / 180) / 200);
      geometries[2].radius = 40 + Math.sin(t / 17 * Math.PI / 180) * 20;
      geometries[3].radius1 = 120 + Math.sin(t / 17 * Math.PI / 180) * 20;
      geometries[3].radius2 = 60 + Math.cos(t / 17 * Math.PI / 180) * 20;
      geometries[3].rotation += -d / 60;
      render();
      if (animated) {
        requestAnimationFrame(animate);
      }
      return stats.end();
    };
    canvas.click(function(e) {
      if (!animated) {
        t = new Date().valueOf();
        requestAnimationFrame(animate);
        return animated = true;
      } else {
        return animated = false;
      }
    });
    return render();
  });

}).call(this);
